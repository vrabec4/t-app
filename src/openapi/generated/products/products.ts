/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * FakeStoreAPI
 * A free fake API for testing and prototyping e-commerce applications.
 * OpenAPI spec version: 2.1.8
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customFetcher } from '../../api-client';
import type { Product } from '../../model';

/**
 * Retrieve a list of all available products.
 * @summary Get all products
 */
export const getAllProducts = (signal?: AbortSignal) => {
  return customFetcher<Product[]>({ url: `/products`, method: 'GET', signal });
};

export const getGetAllProductsQueryKey = () => {
  return [`/products`] as const;
};

export const getGetAllProductsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAllProducts>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getAllProducts>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProducts>>> = ({
    signal,
  }) => getAllProducts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllProductsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllProducts>>
>;
export type GetAllProductsInfiniteQueryError = void;

export function useGetAllProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllProducts>>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllProducts>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllProducts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllProducts>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllProducts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all products
 */

export function useGetAllProductsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllProducts>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllProducts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllProductsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllProductsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllProducts>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllProductsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllProducts>>> = ({
    signal,
  }) => getAllProducts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllProducts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllProductsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllProducts>>
>;
export type GetAllProductsQueryError = void;

export function useGetAllProducts<
  TData = Awaited<ReturnType<typeof getAllProducts>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllProducts<
  TData = Awaited<ReturnType<typeof getAllProducts>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllProducts>>,
          TError,
          Awaited<ReturnType<typeof getAllProducts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllProducts<
  TData = Awaited<ReturnType<typeof getAllProducts>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all products
 */

export function useGetAllProducts<
  TData = Awaited<ReturnType<typeof getAllProducts>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllProducts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllProductsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new product.
 * @summary Add a new product
 */
export const addProduct = (product: Product, signal?: AbortSignal) => {
  return customFetcher<Product>({
    url: `/products`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: product,
    signal,
  });
};

export const getAddProductMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addProduct>>,
    TError,
    { data: Product },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addProduct>>,
  TError,
  { data: Product },
  TContext
> => {
  const mutationKey = ['addProduct'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addProduct>>,
    { data: Product }
  > = (props) => {
    const { data } = props ?? {};

    return addProduct(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof addProduct>>
>;
export type AddProductMutationBody = Product;
export type AddProductMutationError = void;

/**
 * @summary Add a new product
 */
export const useAddProduct = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addProduct>>,
      TError,
      { data: Product },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof addProduct>>,
  TError,
  { data: Product },
  TContext
> => {
  const mutationOptions = getAddProductMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve details of a specific product by ID.
 * @summary Get a single product
 */
export const getProductById = (id: number, signal?: AbortSignal) => {
  return customFetcher<Product>({
    url: `/products/${id}`,
    method: 'GET',
    signal,
  });
};

export const getGetProductByIdQueryKey = (id: number) => {
  return [`/products/${id}`] as const;
};

export const getGetProductByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getProductById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductById>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductById>>> = ({
    signal,
  }) => getProductById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getProductById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductById>>
>;
export type GetProductByIdInfiniteQueryError = void;

export function useGetProductByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductById>>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductById>>,
          TError,
          Awaited<ReturnType<typeof getProductById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductById>>,
          TError,
          Awaited<ReturnType<typeof getProductById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single product
 */

export function useGetProductByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getProductById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getProductById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductByIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetProductByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getProductById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetProductByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getProductById>>> = ({
    signal,
  }) => getProductById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getProductById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetProductByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getProductById>>
>;
export type GetProductByIdQueryError = void;

export function useGetProductById<
  TData = Awaited<ReturnType<typeof getProductById>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductById>>,
          TError,
          Awaited<ReturnType<typeof getProductById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductById<
  TData = Awaited<ReturnType<typeof getProductById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getProductById>>,
          TError,
          Awaited<ReturnType<typeof getProductById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetProductById<
  TData = Awaited<ReturnType<typeof getProductById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single product
 */

export function useGetProductById<
  TData = Awaited<ReturnType<typeof getProductById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getProductById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetProductByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing product by ID.
 * @summary Update a product
 */
export const updateProduct = (id: number, product: Product) => {
  return customFetcher<Product>({
    url: `/products/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: product,
  });
};

export const getUpdateProductMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateProduct>>,
    TError,
    { id: number; data: Product },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateProduct>>,
  TError,
  { id: number; data: Product },
  TContext
> => {
  const mutationKey = ['updateProduct'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateProduct>>,
    { id: number; data: Product }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateProduct(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateProduct>>
>;
export type UpdateProductMutationBody = Product;
export type UpdateProductMutationError = void;

/**
 * @summary Update a product
 */
export const useUpdateProduct = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateProduct>>,
      TError,
      { id: number; data: Product },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateProduct>>,
  TError,
  { id: number; data: Product },
  TContext
> => {
  const mutationOptions = getUpdateProductMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a specific product by ID.
 * @summary Delete a product
 */
export const deleteProduct = (id: number) => {
  return customFetcher<void>({ url: `/products/${id}`, method: 'DELETE' });
};

export const getDeleteProductMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteProduct>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteProduct>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteProduct'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteProduct>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteProduct(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteProductMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteProduct>>
>;

export type DeleteProductMutationError = void;

/**
 * @summary Delete a product
 */
export const useDeleteProduct = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteProduct>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteProduct>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteProductMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
