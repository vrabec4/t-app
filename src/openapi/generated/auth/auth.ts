/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * FakeStoreAPI
 * A free fake API for testing and prototyping e-commerce applications.
 * OpenAPI spec version: 2.1.8
 */
import { useMutation } from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import { customFetcher } from '../../api-client';
import type { Login, LoginResponse } from '../../model';

/**
 * Authenticate a user.
 * @summary Login
 */
export const loginUser = (login: Login, signal?: AbortSignal) => {
  return customFetcher<LoginResponse>({
    url: `/auth/login`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: login,
    signal,
  });
};

export const getLoginUserMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginUser>>,
    TError,
    { data: Login },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: Login },
  TContext
> => {
  const mutationKey = ['loginUser'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginUser>>,
    { data: Login }
  > = (props) => {
    const { data } = props ?? {};

    return loginUser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginUser>>
>;
export type LoginUserMutationBody = Login;
export type LoginUserMutationError = void;

/**
 * @summary Login
 */
export const useLoginUser = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginUser>>,
      TError,
      { data: Login },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof loginUser>>,
  TError,
  { data: Login },
  TContext
> => {
  const mutationOptions = getLoginUserMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
