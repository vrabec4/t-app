/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * FakeStoreAPI
 * A free fake API for testing and prototyping e-commerce applications.
 * OpenAPI spec version: 2.1.8
 */
import { useInfiniteQuery, useMutation, useQuery } from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import { customFetcher } from '../../api-client';
import type { Cart } from '../../model';

/**
 * Retrieve a list of all available carts.
 * @summary Get all carts
 */
export const getAllCarts = (signal?: AbortSignal) => {
  return customFetcher<Cart[]>({ url: `/carts`, method: 'GET', signal });
};

export const getGetAllCartsQueryKey = () => {
  return [`/carts`] as const;
};

export const getGetAllCartsInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getAllCarts>>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseInfiniteQueryOptions<
      Awaited<ReturnType<typeof getAllCarts>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCartsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCarts>>> = ({
    signal,
  }) => getAllCarts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getAllCarts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllCartsInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCarts>>
>;
export type GetAllCartsInfiniteQueryError = void;

export function useGetAllCartsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllCarts>>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllCarts>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCarts>>,
          TError,
          Awaited<ReturnType<typeof getAllCarts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllCartsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllCarts>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllCarts>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCarts>>,
          TError,
          Awaited<ReturnType<typeof getAllCarts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllCartsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllCarts>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllCarts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all carts
 */

export function useGetAllCartsInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getAllCarts>>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getAllCarts>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllCartsInfiniteQueryOptions(options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAllCartsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllCarts>>,
  TError = void,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllCartsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAllCarts>>> = ({
    signal,
  }) => getAllCarts(signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllCarts>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetAllCartsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllCarts>>
>;
export type GetAllCartsQueryError = void;

export function useGetAllCarts<
  TData = Awaited<ReturnType<typeof getAllCarts>>,
  TError = void,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCarts>>,
          TError,
          Awaited<ReturnType<typeof getAllCarts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllCarts<
  TData = Awaited<ReturnType<typeof getAllCarts>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAllCarts>>,
          TError,
          Awaited<ReturnType<typeof getAllCarts>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAllCarts<
  TData = Awaited<ReturnType<typeof getAllCarts>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get all carts
 */

export function useGetAllCarts<
  TData = Awaited<ReturnType<typeof getAllCarts>>,
  TError = void,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAllCarts>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAllCartsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new cart.
 * @summary Add a new cart
 */
export const addCart = (cart: Cart, signal?: AbortSignal) => {
  return customFetcher<Cart>({
    url: `/carts`,
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    data: cart,
    signal,
  });
};

export const getAddCartMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCart>>,
    TError,
    { data: Cart },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof addCart>>,
  TError,
  { data: Cart },
  TContext
> => {
  const mutationKey = ['addCart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addCart>>,
    { data: Cart }
  > = (props) => {
    const { data } = props ?? {};

    return addCart(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AddCartMutationResult = NonNullable<
  Awaited<ReturnType<typeof addCart>>
>;
export type AddCartMutationBody = Cart;
export type AddCartMutationError = void;

/**
 * @summary Add a new cart
 */
export const useAddCart = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof addCart>>,
      TError,
      { data: Cart },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof addCart>>,
  TError,
  { data: Cart },
  TContext
> => {
  const mutationOptions = getAddCartMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve details of a specific cart by ID.
 * @summary Get a single cart
 */
export const getCartById = (id: number, signal?: AbortSignal) => {
  return customFetcher<Cart>({ url: `/carts/${id}`, method: 'GET', signal });
};

export const getGetCartByIdQueryKey = (id: number) => {
  return [`/carts/${id}`] as const;
};

export const getGetCartByIdInfiniteQueryOptions = <
  TData = InfiniteData<Awaited<ReturnType<typeof getCartById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCartById>>,
        TError,
        TData
      >
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCartByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCartById>>> = ({
    signal,
  }) => getCartById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseInfiniteQueryOptions<
    Awaited<ReturnType<typeof getCartById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCartByIdInfiniteQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCartById>>
>;
export type GetCartByIdInfiniteQueryError = void;

export function useGetCartByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCartById>>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCartById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartById>>,
          TError,
          Awaited<ReturnType<typeof getCartById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCartByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCartById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCartById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartById>>,
          TError,
          Awaited<ReturnType<typeof getCartById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCartByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCartById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCartById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single cart
 */

export function useGetCartByIdInfinite<
  TData = InfiniteData<Awaited<ReturnType<typeof getCartById>>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseInfiniteQueryOptions<
        Awaited<ReturnType<typeof getCartById>>,
        TError,
        TData
      >
    >;
  },
  queryClient?: QueryClient
): UseInfiniteQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCartByIdInfiniteQueryOptions(id, options);

  const query = useInfiniteQuery(
    queryOptions,
    queryClient
  ) as UseInfiniteQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetCartByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getCartById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>
    >;
  }
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCartByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCartById>>> = ({
    signal,
  }) => getCartById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCartById>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCartByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCartById>>
>;
export type GetCartByIdQueryError = void;

export function useGetCartById<
  TData = Awaited<ReturnType<typeof getCartById>>,
  TError = void,
>(
  id: number,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartById>>,
          TError,
          Awaited<ReturnType<typeof getCartById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCartById<
  TData = Awaited<ReturnType<typeof getCartById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCartById>>,
          TError,
          Awaited<ReturnType<typeof getCartById>>
        >,
        'initialData'
      >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCartById<
  TData = Awaited<ReturnType<typeof getCartById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get a single cart
 */

export function useGetCartById<
  TData = Awaited<ReturnType<typeof getCartById>>,
  TError = void,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCartById>>, TError, TData>
    >;
  },
  queryClient?: QueryClient
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCartByIdQueryOptions(id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update an existing cart by ID.
 * @summary Update a cart
 */
export const updateCart = (id: number, cart: Cart) => {
  return customFetcher<Cart>({
    url: `/carts/${id}`,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    data: cart,
  });
};

export const getUpdateCartMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCart>>,
    TError,
    { id: number; data: Cart },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateCart>>,
  TError,
  { id: number; data: Cart },
  TContext
> => {
  const mutationKey = ['updateCart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCart>>,
    { id: number; data: Cart }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateCart(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateCartMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCart>>
>;
export type UpdateCartMutationBody = Cart;
export type UpdateCartMutationError = void;

/**
 * @summary Update a cart
 */
export const useUpdateCart = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateCart>>,
      TError,
      { id: number; data: Cart },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof updateCart>>,
  TError,
  { id: number; data: Cart },
  TContext
> => {
  const mutationOptions = getUpdateCartMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a specific cart by ID.
 * @summary Delete a cart
 */
export const deleteCart = (id: number) => {
  return customFetcher<void>({ url: `/carts/${id}`, method: 'DELETE' });
};

export const getDeleteCartMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCart>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCart>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationKey = ['deleteCart'];
  const { mutation: mutationOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey } };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCart>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCart(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCartMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCart>>
>;

export type DeleteCartMutationError = void;

/**
 * @summary Delete a cart
 */
export const useDeleteCart = <TError = void, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCart>>,
      TError,
      { id: number },
      TContext
    >;
  },
  queryClient?: QueryClient
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCart>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteCartMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
